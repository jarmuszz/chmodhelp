#!/usr/bin/env bash

# chmodhelp - Simple tool, that helps with use of chmod
# Copyright (C) 2019  Mariusz Jakoniuk (jarmusz)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

function print_help {
#################
# help function #
#################
  #
  # prints help and then exits
  #
  if [[ -z $1 ]]; then
    echo "Usage: chmodhelp [NUMERIC NOTATION]"
    echo "       chmodhelp [SYMBOLIC NOTATION]"
    echo "       chmodhelp [OPTION]"
    echo ""
    echo "Prints chmod table corresponding to NUMERIC NOTATION or SYMBOLIC NOTATION."
    echo ""
    echo "Options: -h, --help           Displays this message"
    echo "         -i, --interactive    Interactive mode, see Interactive Mode for more help"
    echo ""
    echo "Interactive Mode:"
    echo "    Typing position of cell will fill/empty it. Cell's Positions"
    echo "    are made up of cell's class ((O)wner, (G)roup, (E)veryone)"
    echo "    and cell's permission ((R)ead, (W)rite, E(X)ecute)."
    echo ""
    echo "    E.g. Valid Position for cell representing (O)wner's right"
    echo "    to e(X)ecute is \"ox\" or \"xo\"."
    echo ""
    echo "    Upper and lowercase letters are treated as the same."
    echo "    On the bottom of the table, Numeric and Symbolic Notation are shown."
    echo "    Ctrl-C will exit program."
    echo ""
    echo "Examples:"
    echo "       chmodhelp"
    echo "       chmodhelp 755"
    echo "       chmodhelp rwxr-xr-x"
    echo "       chmodhelp -h"
    echo ''
    echo "chmodhelp Copyright (C) 2019 Mariusz Jakoniuk (jarmuszz)"
    echo "This program comes with ABSOLUTELY NO WARRANTY."
    echo "This is a free software released under GNU GPL"
    echo "Version 3 license. You are free do modify and"
    echo "redistribute it under certain conditions. Check LICENSE"
    echo "file, bundled with the program (if you don't have it,"
    echo "copy is avaible on https://www.gnu.org/licenses/)" 
    echo "for more informations." 
    echo ""
    echo "Version: 1.4"
    echo 'All bugs report to: https://github.com/jarmuszz/chmodhelp'
    exit 1
  else
    echo -e "chmodhelp \e[91mError\e[0m:"
    echo -e "    \e[1m${1}\e[0m"
    echo -e "Type \e[97mchmodhelp -h \e[0mfor help"
    exit 1
  fi
}

function check_options {
###########################
# checks options and runs #
#  coresponding commands  #
###########################
  #
  #
  # OPTIONS array contains avaible
  # options. ACTIONS table contains
  # coresponding commands.
  # e.g:
  #   OPTIONS[0] -> '-h'
  #   ACTIONS[0] -> 'print_help'
  OPTIONS=('-h' '--help'
           '-i' '--interactive')
  #
  ACTIONS=("print_help" "print_help" 
           "interactive" "interactive")
  #
  #
  # This loop checks every iteration
  # if argument is in OPTIONS array,
  # if it is, then coresponding command  
  # form ACTIONS array is executed.
  for ((i=0; i<=${#OPTIONS[*]}; i++)) {
    if [[ $1 = "${OPTIONS[$i]}" ]]; then
      ${ACTIONS[$i]}
      exit 0
  fi
  }
  #
  # If argument is invalid, then
  # error message is printed
  print_help "Invalid Option: \"$1\""
}

function num_to_text {
  for ((i=1; i<=3; i++)); do
  #########################################
  # converts numeric to symbolic notation #
  #########################################
    #
    # Gets one digit from
    # number every iteration.
    # e.g. 755:
    #   1st iteration: 7
    #   2nd iteration: 5
    #   3rd iteration: 5
    num=$(echo "$1"|cut -b${i})
    #
    # Checking every number is 
    # faster than calculations.
    #
    case $num in
      7) echo -n "rwx" ;;
      6) echo -n "rw-" ;;
      5) echo -n "r-x" ;;
      4) echo -n "r--" ;;
      3) echo -n "-wx" ;;
      2) echo -n "-w-" ;;
      1) echo -n "--x" ;;
      0) echo -n "---" ;;
    esac
  done
}

function text_to_num {
    #
    # Variable "a" will hold
    # numeric notation.
    a=""
    #
    #
    for ((i=0; i<3; i++)) {
    #########################################
    # converts symbolic to numeric notation #
    #########################################
      #
      # Class' segment is segment
      # of Symbolic Notation, which
      # contains permissions related
      # only to one class.
      # (e.g. In "rwxr-xr-x" first
      # segment is "rwx" and 
      # it represents Owner's 
      # permissions.) Every
      # segment is exactly
      # 3 symbols long.
      #
      # start of the class' segment
      s=$(( i * 3 + 1 ))
      #
      # end of the class' segment
      e=$(( s + 2 ))
      #
      # checking every combination is
      # faster than the calculations
      case $(echo -n "$1" | cut -b${s}-${e}) in
        "rwx") a+="7" ;;
        "rw-") a+="6" ;;
        "r-x") a+="5" ;;
        "r--") a+="4" ;;
        "-wx") a+="3" ;;
        "-w-") a+="2" ;;
        "--x") a+="1" ;;
        "---") a+="0" ;;
        # 
        # function returns -1
        # when format is invalid
        *)     echo "-1" 
               exit 1 ;;
      esac
    }
  echo $a
}

function draw_table {
  #
  # init of the array
  a=()
  #
  # init of num variable
  num=0
  

  if [[ -n $2 ]]; then
  ######################################
  # runs when first argument is a text #
  ######################################
    #
    # num -> numeric notation
    num=$(text_to_num "$1")
    #
    # text_to_num returns -1 when format is incorrect
    [[ $num -eq -1 ]] && print_help "Invalid Symbolic Notation: $1"
    #
    # o -> symbolic notation
    o=$1


  else
  ########################################
  # runs when first argument is a number #
  ########################################
    #
    #
    # is number lower than 777 
    # (maximal number of numeric notation)
    [[ $1 -gt 777 ]] && print_help "Invalid Numeric Notation: $1"
    #
    # translate numeric to symbolic notation
    # o -> numeric notation
    o=$(num_to_text "$1")
    #
    # num -> symbolic notation
    num=$o
  fi
 

  for ((i=1; i<=${#o}; i++)) {
  #################
  # filling array #
  #################
    #
    #
    p=$(echo "$o" | cut -b${i})
    case $p in
      #
      # filled
      "r"|"w"|"x") a[i-1]="*" ;;
      #
      # empty
      "-") a[i-1]=" " ;;
      *)
    esac
  }
  
##################
# printing table #
##################
  # 
  echo -en  '\e[39m'
  echo -e  '    +---+---+---+'
  echo -e  '    | \e[31mr\e[0m | \e[31mw\e[0m | \e[31mx\e[0m |'
  echo -e  '+---+---+---+---+'
  echo -e  "| \e[32mO\e[0m | ${a[0]} | ${a[1]} | ${a[2]} |" 
  echo -e  '+---+---+---+---+'
  echo -e  "| \e[32mG\e[0m | ${a[3]} | ${a[4]} | ${a[5]} |"  
  echo -e  '+---+---+---+---+'
  echo -e  "| \e[32mE\e[0m | ${a[6]} | ${a[7]} | ${a[8]} |" 
  echo -e  '+---+---+---+---+'
  echo -e  "${1} -> ${num}"
}

function interactive {
####################
# Interactive mode #
####################
  #
  # nn => Numeric Notation variable
  nn=000
  #
  # r => row variable
  r=0
  #
  # c => column variable
  c=0
  #
  # valid => is user input valid
  valid=1
  #
  # a => array that fills the table
  a=()
  #
  # Loop that fills array a with 
  # spaces. This way table does 
  # not break when field is empty.
  for ((i=1; i<=9; i++)) {
    a[i]=' '
  }
  #
  #
  while true; do
  #############
  # Main Loop #
  #############
    #
    # drawing table
    clear
    echo -en  '\e[39m'
    echo -e  '    +---+---+---+'
    echo -e  '    | \e[31mr\e[0m | \e[31mw\e[0m | \e[31mx\e[0m |'
    echo -e  '+---+---+---+---+'
    echo -e  "| \e[32mO\e[0m | ${a[1]} | ${a[2]} | ${a[3]} |" 
    echo -e  '+---+---+---+---+'
    echo -e  "| \e[32mG\e[0m | ${a[4]} | ${a[5]} | ${a[6]} |"  
    echo -e  '+---+---+---+---+'
    echo -e  "| \e[32mE\e[0m | ${a[7]} | ${a[8]} | ${a[9]} |" 
    echo -e  '+---+---+---+---+'
    #
    # "%03d" in "printf" means, that
    # variable "nn" will be always 
    # printed as 3 digit number.
    # It's because Numeric Notation
    # always must be 3 (or in special
    # cases 4) digits long.
    nn=$(printf %03d $nn)
    #
    # num_to_text function convets
    # Numeric Notation to Symbolic
    # Notation.
    #
    # Output will look like this:
    #   755 => rwxr-xr-x
    echo "$nn => $(num_to_text "$nn")"
    #
    # Ctrl-C sends SIGINT signal
    # that stops the program.
    # More about POSIX signals:
    #   en.wikipedia.org/wiki/Signal_(IPC)#POSIX_signals
    echo "Ctrl-C to exit"
    #
    # When given field is invalid
    # additional message is printed.
    if [[ $valid = 0 ]]; then
      echo "Invalid field \"$ou\"";
      valid=1
    fi
    #
    # Prints ":" before user input
    echo -n ":"
    #
    # Reads user input and stores
    # it int the "u" variable.
    # "-r" option makes read
    # ignore backslashes. 
    read -r u
    #
    # Because "u" variable is modified
    # later, we create variable "ou" 
    # which contains original user 
    # input. It will be printed when
    # input is incorrect.
    ou=$u
    #
    # If user input is longer than
    # 2, that means it's 
    # incorrect.
    if [[ ${#u} -gt 2 ]]; then
      valid=0
    fi
    #
    # The '^^' after u variable makes 
    # it upercase, this way lower and
    # upercase letters can be treated 
    # as the same.
    #
    # Note: "not reversed" means that
    # permission char is the first one
    # in the input.
    #
    # Runs only if input is valid;
    # this saves time when we know,
    # that there's something wrong
    # with the input.
    [ $valid = 1 ] &&
    case $(echo "${u^^}" | cut -b1) in
      # This part reverses input back
      # if user typed it in reverse.
      # e.g. xo => ox
      #
      # If 1st char of user input is
      # r, w or x, that means user
      # typed position reversed.
      #
      # "rev" command reverses input.
      'R' | 'W' | 'X') u=$(echo "${u^^}" | rev) ;;
      #
      # If input is not reversed, then
      # we only make $u variable uppercase.
      *) u=${u^^} ;;
    esac
    #
    # Runs only if input is valid;
    # this saves time when we know,
    # that there's something wrong
    # with the input.
    [ $valid = 1 ] &&
    case $(echo "$u" | cut -b1) in
      # Checks rows and sets
      # corresponding variables.
      # r => row variable
      # mult => Numeric Notation Multiplayer
      #
      'O') r=0 
           mult=100
           ;;
      'G') r=3 
           mult=10
           ;;
      'E') r=6
           mult=1
           ;;
        #
        # runs when field is invalid
      *)  valid=0 ;;
    esac
    #
    # c => columns
    c=$(echo "$u" | cut -b2)
    #
    case $c in 
      # The same as above case
      # statement, but
      # checks columns
      # instead of rows.
      #
      # bn => base number
      'R') bn=4
           c=1
           ;;
      'W') bn=2
           c=2
           ;;
      'X') bn=1
           c=3
           ;;
      #
      # runs when output is invalid
      *) valid=0 ;;
    esac
    #
    #
    if [[ $valid = 1 ]]; then
    ################################
    # calculating Numeric Notation # 
    ################################
      #
      # cn => cell number
      cn=$(( r + c ))
      #
      # runs when cell is empty
      if [[ "${a[$cn]}" = " " ]]; then
        #
        # fills cell
        a[$cn]='*'
        # updates Numeric Notation
        nn=$(( bn * mult + nn ))
       
      # runs when cell is filled
      else
        #
        # clears cell
        a[$cn]=' '
        #
        # updates Numeric Notation
        nn=$(( nn - bn * mult ))
      fi
    fi
  done
}


######################
# checking arguments #
######################
  #
  #
if [[ -z $1 ]]; then
  #
  # runs when no argument is passed
  print_help
  #
elif [ "$1" -eq "$1" ] 2>/dev/null; then
##################################
# runs when argument is a number #
##################################
  #
  # Arguments are not mutable,
  # so we create var that holds
  # value of the first argument.
  arg=$1
  #
  # User may input number with dash
  # at the beginning, if it's the
  # case, then we cut the dash here.
  [ "$arg" -lt 0 ] &&
    arg=$(echo "$arg" | cut -b2-)
  # 
  # Valid numeric notation is 3 digits
  # long. If argument is shorter, then
  # it's invalid.
  if [ ${#arg} = 3 ]; then
    draw_table "$arg"
  else
    print_help "Invalid Numeric Notation: \"$1\"
    Number must be 3 digits long"
  fi
  #
  #
elif [[ ${#1} = 9 ]]; then
  #
  # runs when lenght of argument is 9 (lenght of symbolic notation)
  draw_table "$1" 1
  #
else
  #
  # runs when argument doesnt mach any of above
  check_options "$1"
  #
fi
